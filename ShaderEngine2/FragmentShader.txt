#version 330 core

in vec2 UV;

in vec3 Normal;

in vec3 FragPos;

out vec3 color;

uniform vec3 lightColor;

uniform sampler2D myTextureSampler;

uniform vec3 lightPos;  

uniform vec3 cameraPos;

void main()
{
    color = texture( myTextureSampler, UV ).rgb;
	
	//AMBIENT
	float ambientStrength = 1;
	vec3 ambient = ambientStrength * lightColor;
	vec3 result = ambient * color;
	color = result;
	
	//DIFFUSE
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	vec3 lightDistance = lightPos - FragPos;
	float lightLength = length(lightDistance);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;
	
	//SPECULAR
	float specularStrength = 1;
	vec3 viewDir = normalize(cameraPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 256);
	vec3 specular = specularStrength * spec * lightColor; 
	
	result = ((ambient + diffuse + specular) / pow(lightLength,2))  * color;
	color = result;
}